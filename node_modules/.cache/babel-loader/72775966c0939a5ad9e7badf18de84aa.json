{"ast":null,"code":"import HeroesStore from '../store/HeroesStore';\nimport { configMain } from '../configs/configMain';\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst HeroesMatchups = async id => {\n  let res = await fetch(`${configMain.serverUrl}/api/heroes/${id}/matchups`, {\n    method: \"GET\"\n  }).then(ans => ans.json()).then(ans => {\n    return ans;\n  });\n  let ansArr = {};\n\n  for (let matchup of res) {\n    if (matchup.games_played < 10) {\n      ansArr[matchup.hero_id] = 100 / (matchup.games_played + 10 - matchup.games_played) * (matchup.wins + 10 - matchup.games_played) / 2;\n    } else {\n      ansArr[matchup.hero_id] = 100 / matchup.games_played * matchup.wins;\n    }\n  } // await sleep(1000)\n\n\n  return ansArr;\n};\n\n_c = HeroesMatchups;\n\nconst InitHeroesData = async () => {\n  let res = await fetch(`${configMain.serverUrl}/api/heroStats`, {\n    method: \"GET\"\n  }).then(ans => ans.json()).then(ans => {\n    return ans;\n  });\n  let ansArr;\n\n  if (res) {\n    ansArr = {};\n\n    for (let [index, hero] of res.entries()) {\n      // let matchups = await HeroesMatchups(hero.id)\n      ansArr[hero.id] = {\n        id: hero.id,\n        localized_name: hero.localized_name,\n        roles: hero.roles,\n        img: hero.img // matchups:matchups\n\n      };\n    }\n  }\n\n  HeroesStore.SetHeroes(ansArr);\n};\n\n_c2 = InitHeroesData;\nsetInterval(() => {\n  if (HeroesStore.heroes.length === 0) {\n    InitHeroesData();\n  }\n}, 1000);\nexport { InitHeroesData, HeroesMatchups };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"HeroesMatchups\");\n$RefreshReg$(_c2, \"InitHeroesData\");","map":{"version":3,"sources":["C:/Users/2209l/Desktop/picker/src/controllers/HeroesController.js"],"names":["HeroesStore","configMain","sleep","ms","Promise","resolve","setTimeout","HeroesMatchups","id","res","fetch","serverUrl","method","then","ans","json","ansArr","matchup","games_played","hero_id","wins","InitHeroesData","index","hero","entries","localized_name","roles","img","SetHeroes","setInterval","heroes","length"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,sBAAxB;AACA,SAASC,UAAT,QAA2B,uBAA3B;;AAEA,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACf,SAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACH;;AAED,MAAMI,cAAc,GAAG,MAAOC,EAAP,IAAc;AACjC,MAAIC,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAET,UAAU,CAACU,SAAU,eAAcH,EAAG,WAA1C,EACjB;AACII,IAAAA,MAAM,EAAE;AADZ,GADiB,CAAL,CAKXC,IALW,CAKLC,GAAD,IAASA,GAAG,CAACC,IAAJ,EALH,EAMXF,IANW,CAMLC,GAAD,IAAS;AAAE,WAAOA,GAAP;AAAY,GANjB,CAAhB;AAOA,MAAIE,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,OAAT,IAAoBR,GAApB,EAAyB;AACrB,QAAIQ,OAAO,CAACC,YAAR,GAAuB,EAA3B,EAA+B;AAC3BF,MAAAA,MAAM,CAACC,OAAO,CAACE,OAAT,CAAN,GAA0B,OAAOF,OAAO,CAACC,YAAR,GAAuB,EAAvB,GAA4BD,OAAO,CAACC,YAA3C,KAA4DD,OAAO,CAACG,IAAR,GAAe,EAAf,GAAoBH,OAAO,CAACC,YAAxF,IAAuG,CAAjI;AACH,KAFD,MAEO;AACHF,MAAAA,MAAM,CAACC,OAAO,CAACE,OAAT,CAAN,GAA0B,MAAMF,OAAO,CAACC,YAAd,GAA6BD,OAAO,CAACG,IAA/D;AACH;AAEJ,GAhBgC,CAkBjC;;;AACA,SAAOJ,MAAP;AACH,CApBD;;KAAMT,c;;AAsBN,MAAMc,cAAc,GAAG,YAAY;AAC/B,MAAIZ,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAET,UAAU,CAACU,SAAU,gBAAzB,EACjB;AACIC,IAAAA,MAAM,EAAE;AADZ,GADiB,CAAL,CAKXC,IALW,CAKLC,GAAD,IAASA,GAAG,CAACC,IAAJ,EALH,EAMXF,IANW,CAMLC,GAAD,IAAS;AACX,WAAOA,GAAP;AACH,GARW,CAAhB;AASA,MAAIE,MAAJ;;AACA,MAAIP,GAAJ,EAAS;AACLO,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAK,IAAI,CAACM,KAAD,EAAQC,IAAR,CAAT,IAA0Bd,GAAG,CAACe,OAAJ,EAA1B,EAAyC;AACrC;AACAR,MAAAA,MAAM,CAACO,IAAI,CAACf,EAAN,CAAN,GAAkB;AACdA,QAAAA,EAAE,EAAEe,IAAI,CAACf,EADK;AAEdiB,QAAAA,cAAc,EAAEF,IAAI,CAACE,cAFP;AAGdC,QAAAA,KAAK,EAAEH,IAAI,CAACG,KAHE;AAIdC,QAAAA,GAAG,EAAEJ,IAAI,CAACI,GAJI,CAKd;;AALc,OAAlB;AAOH;AACJ;;AACD3B,EAAAA,WAAW,CAAC4B,SAAZ,CAAsBZ,MAAtB;AACH,CAzBD;;MAAMK,c;AA2BNQ,WAAW,CAAC,MAAM;AAAE,MAAI7B,WAAW,CAAC8B,MAAZ,CAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AAAEV,IAAAA,cAAc;AAAI;AAAE,CAApE,EAAsE,IAAtE,CAAX;AAEA,SACIA,cADJ,EAEId,cAFJ","sourcesContent":["import HeroesStore from '../store/HeroesStore'\r\nimport { configMain } from '../configs/configMain'\r\n\r\nfunction sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nconst HeroesMatchups = async (id) => {\r\n    let res = await fetch(`${configMain.serverUrl}/api/heroes/${id}/matchups`,\r\n        {\r\n            method: \"GET\"\r\n        }\r\n    )\r\n        .then((ans) => ans.json())\r\n        .then((ans) => { return ans })\r\n    let ansArr = {}\r\n    for (let matchup of res) {\r\n        if (matchup.games_played < 10) {\r\n            ansArr[matchup.hero_id] = 100 / (matchup.games_played + 10 - matchup.games_played) * (matchup.wins + 10 - matchup.games_played) /2\r\n        } else {\r\n            ansArr[matchup.hero_id] = 100 / matchup.games_played * matchup.wins\r\n        }\r\n\r\n    }\r\n\r\n    // await sleep(1000)\r\n    return ansArr\r\n}\r\n\r\nconst InitHeroesData = async () => {\r\n    let res = await fetch(`${configMain.serverUrl}/api/heroStats`,\r\n        {\r\n            method: \"GET\"\r\n        }\r\n    )\r\n        .then((ans) => ans.json())\r\n        .then((ans) => {\r\n            return ans\r\n        })\r\n    let ansArr\r\n    if (res) {\r\n        ansArr = {}\r\n        for (let [index, hero] of res.entries()) {\r\n            // let matchups = await HeroesMatchups(hero.id)\r\n            ansArr[hero.id] = {\r\n                id: hero.id,\r\n                localized_name: hero.localized_name,\r\n                roles: hero.roles,\r\n                img: hero.img,\r\n                // matchups:matchups\r\n            }\r\n        }\r\n    }\r\n    HeroesStore.SetHeroes(ansArr)\r\n}\r\n\r\nsetInterval(() => { if (HeroesStore.heroes.length === 0) { InitHeroesData() } }, 1000)\r\n\r\nexport {\r\n    InitHeroesData,\r\n    HeroesMatchups\r\n}\r\n"]},"metadata":{},"sourceType":"module"}